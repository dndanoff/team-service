/*
 * This file is generated by jOOQ.
*/
package com.danoff.team.db.tables;


import com.danoff.team.db.Keys;
import com.danoff.team.db.Public;
import com.danoff.team.db.tables.records.MemberContactRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MemberContact extends TableImpl<MemberContactRecord> {

    private static final long serialVersionUID = -1798641581;

    /**
     * The reference instance of <code>PUBLIC.MEMBER_CONTACT</code>
     */
    public static final MemberContact MEMBER_CONTACT = new MemberContact();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MemberContactRecord> getRecordType() {
        return MemberContactRecord.class;
    }

    /**
     * The column <code>PUBLIC.MEMBER_CONTACT.ID</code>.
     */
    public final TableField<MemberContactRecord, Long> ID = createField("ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.MEMBER_CONTACT.MEMBER_ID</code>.
     */
    public final TableField<MemberContactRecord, Long> MEMBER_ID = createField("MEMBER_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.MEMBER_CONTACT.CONTACT_TYPE_ID</code>.
     */
    public final TableField<MemberContactRecord, Long> CONTACT_TYPE_ID = createField("CONTACT_TYPE_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.MEMBER_CONTACT.VALUE</code>.
     */
    public final TableField<MemberContactRecord, String> VALUE = createField("VALUE", org.jooq.impl.SQLDataType.VARCHAR.length(200).nullable(false), this, "");

    /**
     * Create a <code>PUBLIC.MEMBER_CONTACT</code> table reference
     */
    public MemberContact() {
        this("MEMBER_CONTACT", null);
    }

    /**
     * Create an aliased <code>PUBLIC.MEMBER_CONTACT</code> table reference
     */
    public MemberContact(String alias) {
        this(alias, MEMBER_CONTACT);
    }

    private MemberContact(String alias, Table<MemberContactRecord> aliased) {
        this(alias, aliased, null);
    }

    private MemberContact(String alias, Table<MemberContactRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<MemberContactRecord, Long> getIdentity() {
        return Keys.IDENTITY_MEMBER_CONTACT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MemberContactRecord> getPrimaryKey() {
        return Keys.MEMBER_CONTACT_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MemberContactRecord>> getKeys() {
        return Arrays.<UniqueKey<MemberContactRecord>>asList(Keys.MEMBER_CONTACT_PK, Keys.CONSTRAINT_3);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<MemberContactRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MemberContactRecord, ?>>asList(Keys.FK_MEMBER, Keys.FK_CONTACT_TYPE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MemberContact as(String alias) {
        return new MemberContact(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MemberContact rename(String name) {
        return new MemberContact(name, null);
    }
}
